/*
 * Mixins
 * ======
 *
 * General-purpose Mixins to be 
 * used with other SASS/scss files
 *
 *
 * 
 */

@import "variables";

/*
  Basic autoprefixer mixins
 */
@mixin transition($value){
  -webkit-transition: ($value);
     -moz-transition: ($value);
      -ms-transition: ($value);
          transition: ($value);
}

@each $font in map-get($_metadata,'fonts') {   
  @font-face {
    @each $property, $value in $font{
    @if $property == "src"{
    $font-folder: "#{map-get(map-get($_metadata,'folders'),'root')}/#{map-get(map-get($_metadata,'folders'),'fonts')}";
    #{$property}:url('#{$font-folder}/#{$value}');
  }
  @else
    {
      #{$property}:$value;
    }

  }
  }
}

/*
  ## Mixins by Hugo Giraudel
  
  http://www.sitepoint.com/dont-use-compass-anymore/
 */

/** 
### Tint

Slightly lighten a color
***
@param {Color} $color color to tint
@param {Number} $percentage percentage of `$color` in returned color
@return {Color}
*/
@function tint($color, $percentage) {
  @return mix($color, white, $percentage);
}
 
/* Slightly darken a color
 @access public
 @param {Color} $color color to shade
 @param {Number} $percentage percentage of `$color` in returned color
 @return {Color}
*/
@function shade($color, $percentage) {
  @return mix($color, black, $percentage);
}

/*
http://www.paulund.co.uk/sass-mixins-get-started-next-project
 */
@mixin background-gradient($startColor, $endColor, $orientation: '') {
    background: $startColor;

    @if $orientation == 'vertical' {
      background: -webkit-linear-gradient(top, $startColor, $endColor);
      background: linear-gradient(to bottom, $startColor, $endColor);
    } @else if $orientation == 'horizontal' {
      background: -webkit-linear-gradient(left, $startColor, $endColor);
      background: linear-gradient(to right, $startColor, $endColor);
    } @else {
      background: -webkit-radial-gradient(center, ellipse cover, $startColor, $endColor);
      background: radial-gradient(ellipse at center, $startColor, $endColor);
    }
}

@mixin center-element {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

/*
## Centering Mixin

Mixin for centering elements inside other components

#### PRE-conditions

+ parent must be relative positioned
 */
@mixin centering($vertical:true, $horizontal:false){
  position:absolute;
  @if ($vertical && $horizontal){
    @include transform(translateY(-50%) translateX(-50%));
  }
  @if ($vertical){
    top: 50%;
    @include transform(translateY(-50%));
  }
  @if ($horizontal){
    left:50%;
    @include transform(translateX(-50%));
  }

}

/*

## Colored bullet lists INSIDE a specific div/container/section/whatever

#### PRE

+ must be applied to an element that contains uls and lis

 */
@mixin colored-bullet-lists($color:tomato,$padding-left:20px,$bullet-icon:'\2022') {
    ul{
      list-style-type: none;
        padding-left: $padding-left;
      }

li {
    padding-bottom: 10px;

    &::before{
      content:$bullet-icon;
      display: block;
      position: relative;
      max-width: 0px;
      max-height: 0px;
      left: -$padding-left;
      color: $color;
    }
}
}
/*
## Position mixin

Define the position of an element quickly

#### Properties

+ source: http://www.paulund.co.uk/sass-mixins-get-started-next-project

@example
  .box
  {
    @include position(absolute, 10px, 10px, 10px, 10px);
  }

 */
@mixin position($type, $top: null, $right: null, $bottom: null, $left: null) {
    position: $type;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

/*
## Size mixin

Define the size of an element

#### Properties

+ source: http://www.paulund.co.uk/sass-mixins-get-started-next-project

#### Examples

.box
{
  @include size(300px);
}

.box
{
  @include size(300px, 600px);
}

 */
@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}

/*
## Vendor prefix anything

Define the size of an element

+ source: http://www.paulund.co.uk/sass-mixins-get-started-next-project

#### Parameters

+ $property
+ $value
+ $vendors

#### Examples

.element {
  @include prefix(transform, rotate(90deg), webkit ms);
}

 */
@mixin prefix($property, $value, $vendors: webkit moz ms o) {
      @if $vendors {
        @each $vendor in $vendors {
          #{"-" + $vendor + "-" + $property}: #{$value};
        }
      }
      #{$property}: #{$value};
}

/********************************

## REM to Pixels

The REM CSS unit is widely supported on most modern
browsers but it's not supported in IE8 and lower browsers,
for unit values to work in both modern browsers and
IE8 we will need to duplicate the property in the CSS

+ source: http://www.paulund.co.uk/sass-mixins-get-started-next-project

#### Parameters


#### Examples

.box
{
  @include rem2px(font-size, 1.4);
}

**********************************/
@mixin rem2px($property, $sizeValue: 1.6) {
  #{$property}: ($sizeValue * 10) + px;
  #{$property}: $sizeValue + rem;
}

/*

## Clearfix

Use the below mixin for quickly clear fixing your HTML elements.

+ source: http://www.paulund.co.uk/sass-mixins-get-started-next-project

@examples
.box
{
  @include clearfix;
}

 */

@mixin clearfix {
    *zoom: 1;

    &:before, &:after {
        content: ' ';
        display: table;
    }

    &:after {
        clear: both;
    }
}



// by bloggers and entities

@mixin breakpoint($point) {
  // from Chris Coyier
// http://css-tricks.com/media-queries-sass-3-2-and-codekit/
  @if $point == papa-bear {
    @media (max-width: 1600px) { @content; }
  }
  @else if $point == mama-bear {
    @media (max-width: 1250px) { @content; }
  }
  @else if $point == baby-bear {
    @media (max-width: 650px)  { @content; }
  }
}

/// Function to generate long shadows (because flat is so has-been).
/// Property-agnostic: works for both `box-shadow` and `text-shadow`.
/// `cos` and `sin` might need to be polyfilled if Compass or any 
/// equivalent such as SassyMath is not in use.
///
/// @author Hugo Giraudel
///
/// @link https://unindented.org/articles/trigonometry-in-sass/ Pure Sass `cos` and `sin`
///
/// @param {Direction} $direction
///     Shadow's direction (angle or keyword)
/// @param {Length} $length
///     Shadow's length
/// @param {Color} $color
///     Shadow's color
/// @param {Bool | Color} $fade [false]
///     Whether or not shadow should fade: 
///     - `false` means no fading, shadow is `$color`
///     - `true`  means fading from `$color` to transparent
///     - a color means fading from `$color` to `$fade`
/// @param {Number} $shadow-count [100]
///     Number of computed shadows
///
/// @return {List} - List of shadows
///
/// @require {function} Compass/helpers/math/cos
///     http://compass-style.org/reference/compass/helpers/math/#cos
/// @require {function} Compass/helpers/math/sin
///     http://compass-style.org/reference/compass/helpers/math/#sin
///
/// @example scss - Usage
/// .foo {
///   text-shadow: long-shadow(42deg, 1em, #16a085);
/// }
/// .bar {
///   box-shadow: long-shadow(to top left, 150px, hotpink, tomato);
/// }
@function long-shadow($direction, $length, $color, $fade: false, $shadow-count: 100) {
  $shadows: ();
  $conversion-map: ( 
    to top: 180deg, 
    to top right: 135deg, 
    to right top: 135deg,
    to right: 90deg,
    to bottom right: 45deg,
    to right bottom: 45deg,
    to bottom: 0deg,
    to bottom left: 315deg,
    to left bottom: 315deg,
    to left: 270deg,
    to left top: 225deg,
    to top left: 225deg
  );
  
  @if map-has-key($conversion-map, $direction) {
    $direction: map-get($conversion-map, $direction);
  }
  
  @for $i from 1 through $shadow-count {
    $current-step: ($i * $length / $shadow-count);
    $current-color: if(not $fade, $color, if(type-of($fade) == 'color',  mix($fade, $color, ($i / $shadow-count * 100)), rgba($color, 1 - $i / $shadow-count)));
    
    $shadows: append($shadows, (sin(0deg + $direction) * $current-step) (cos(0deg + $direction) * $current-step) 0 $current-color, 'comma');
  }
  
  @return $shadows;
}

